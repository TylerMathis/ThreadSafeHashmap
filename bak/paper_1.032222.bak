
                %% bare_jrnl.tex
%% V1.4b
%% 2015/08/26
%% by Michael Shell
%% see http://www.michaelshell.org/
%% for current contact information.
%%
%% This is a skeleton file demonstrating the use of IEEEtran.cls
%% (requires IEEEtran.cls version 1.8b or later) with an IEEE
%% journal paper.
%%
%% Support sites:
%% http://www.michaelshell.org/tex/ieeetran/
%% http://www.ctan.org/pkg/ieeetran
%% and
%% http://www.ieee.org/

%%*************************************************************************
%% Legal Notice:
%% This code is offered as-is without any warranty either expressed or
%% implied; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE!
%% User assumes all risk.
%% In no event shall the IEEE or any contributor to this code be liable for
%% any damages or losses, including, but not limited to, incidental,
%% consequential, or any other damages, resulting from the use or misuse
%% of any information contained here.
%%
%% All comments are the opinions of their respective authors and are not
%% necessarily endorsed by the IEEE.
%%
%% This work is distributed under the LaTeX Project Public License (LPPL)
%% ( http://www.latex-project.org/ ) version 1.3, and may be freely used,
%% distributed and modified. A copy of the LPPL, version 1.3, is included
%% in the base LaTeX documentation of all distributions of LaTeX released
%% 2003/12/01 or later.
%% Retain all contribution notices and credits.
%% ** Modified files should be clearly indicated as such, including  **
%% ** renaming them and changing author support contact information. **
%%*************************************************************************


% *** Authors should verify (and, if needed, correct) their LaTeX system  ***
% *** with the testflow diagnostic prior to trusting their LaTeX platform ***
% *** with production work. The IEEE's font choices and paper sizes can   ***
% *** trigger bugs that do not appear when using other class files.       ***                          ***
% The testflow support page is at:
% http://www.michaelshell.org/tex/testflow/


% Please refer to your journal's instructions for other
% options that should be set.
\documentclass[journal,onecolumn]{IEEEtran}
%
% If IEEEtran.cls has not been installed into the LaTeX system files,
% manually specify the path to it like:
% \documentclass[journal]{../sty/IEEEtran}





% Some very useful LaTeX packages include:
% (uncomment the ones you want to load)


% *** MISC UTILITY PACKAGES ***
%
%\usepackage{ifpdf}
% Heiko Oberdiek's ifpdf.sty is very useful if you need conditional
% compilation based on whether the output is pdf or dvi.
% usage:
% \ifpdf
%   % pdf code
% \else
%   % dvi code
% \fi
% The latest version of ifpdf.sty can be obtained from:
% http://www.ctan.org/pkg/ifpdf
% Also, note that IEEEtran.cls V1.7 and later provides a builtin
% \ifCLASSINFOpdf conditional that works the same way.
% When switching from latex to pdflatex and vice-versa, the compiler may
% have to be run twice to clear warning/error messages.






% *** CITATION PACKAGES ***
%
\usepackage{cite}
% cite.sty was written by Donald Arseneau
% V1.6 and later of IEEEtran pre-defines the format of the cite.sty package
% \cite{} output to follow that of the IEEE. Loading the cite package will
% result in citation numbers being automatically sorted and properly
% "compressed/ranged". e.g., [1], [9], [2], [7], [5], [6] without using
% cite.sty will become [1], [2], [5]--[7], [9] using cite.sty. cite.sty's
% \cite will automatically add leading space, if needed. Use cite.sty's
% noadjust option (cite.sty V3.8 and later) if you want to turn this off
% such as if a citation ever needs to be enclosed in parenthesis.
% cite.sty is already installed on most LaTeX systems. Be sure and use
% version 5.0 (2009-03-20) and later if using hyperref.sty.
% The latest version can be obtained at:
% http://www.ctan.org/pkg/cite
% The documentation is contained in the cite.sty file itself.






% *** GRAPHICS RELATED PACKAGES ***
%
\ifCLASSINFOpdf
  \usepackage[pdftex]{graphicx}
  % declare the path(s) where your graphic files are
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.pdf,.jpeg,.png}
\else
  % or other class option (dvipsone, dvipdf, if not using dvips). graphicx
  % will default to the driver specified in the system graphics.cfg if no
  % driver is specified.
  % \usepackage[dvips]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../eps/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.eps}
\fi
% graphicx was written by David Carlisle and Sebastian Rahtz. It is
% required if you want graphics, photos, etc. graphicx.sty is already
% installed on most LaTeX systems. The latest version and documentation
% can be obtained at:
% http://www.ctan.org/pkg/graphicx
% Another good source of documentation is "Using Imported Graphics in
% LaTeX2e" by Keith Reckdahl which can be found at:
% http://www.ctan.org/pkg/epslatex
%
% latex, and pdflatex in dvi mode, support graphics in encapsulated
% postscript (.eps) format. pdflatex in pdf mode supports graphics
% in .pdf, .jpeg, .png and .mps (metapost) formats. Users should ensure
% that all non-photo figures use a vector format (.eps, .pdf, .mps) and
% not a bitmapped formats (.jpeg, .png). The IEEE frowns on bitmapped formats
% which can result in "jaggedy"/blurry rendering of lines and letters as
% well as large increases in file sizes.
%
% You can find documentation about the pdfTeX application at:
% http://www.tug.org/applications/pdftex





% *** MATH PACKAGES ***
%
\usepackage{amsmath}
\interdisplaylinepenalty=2500
% A popular package from the American Mathematical Society that provides
% many useful and powerful commands for dealing with mathematics.
%
% Note that the amsmath package sets \interdisplaylinepenalty to 10000
% thus preventing page breaks from occurring within multiline equations. Use:
%\interdisplaylinepenalty=2500
% after loading amsmath to restore such page breaks as IEEEtran.cls normally
% does. amsmath.sty is already installed on most LaTeX systems. The latest
% version and documentation can be obtained at:
% http://www.ctan.org/pkg/amsmath





% *** SPECIALIZED LIST PACKAGES ***
%
\usepackage{algorithmic}
% algorithmic.sty was written by Peter Williams and Rogerio Brito.
% This package provides an algorithmic environment fo describing algorithms.
% You can use the algorithmic environment in-text or within a figure
% environment to provide for a floating algorithm. Do NOT use the algorithm
% floating environment provided by algorithm.sty (by the same authors) or
% algorithm2e.sty (by Christophe Fiorio) as the IEEE does not use dedicated
% algorithm float types and packages that provide these will not provide
% correct IEEE style captions. The latest version and documentation of
% algorithmic.sty can be obtained at:
% http://www.ctan.org/pkg/algorithms
% Also of interest may be the (relatively newer and more customizable)
% algorithmicx.sty package by Szasz Janos:
% http://www.ctan.org/pkg/algorithmicx




% *** ALIGNMENT PACKAGES ***
%
\usepackage{array}
% Frank Mittelbach's and David Carlisle's array.sty patches and improves
% the standard LaTeX2e array and tabular environments to provide better
% appearance and additional user controls. As the default LaTeX2e table
% generation code is lacking to the point of almost being broken with
% respect to the quality of the end results, all users are strongly
% advised to use an enhanced (at the very least that provided by array.sty)
% set of table tools. array.sty is already installed on most systems. The
% latest version and documentation can be obtained at:
% http://www.ctan.org/pkg/array


% IEEEtran contains the IEEEeqnarray family of commands that can be used to
% generate multiline equations as well as matrices, tables, etc., of high
% quality.




% *** SUBFIGURE PACKAGES ***
\ifCLASSOPTIONcompsoc
  \usepackage[caption=false,font=normalsize,labelfont=sf,textfont=sf]{subfig}
\else
  \usepackage[caption=false,font=footnotesize]{subfig}
\fi
% subfig.sty, written by Steven Douglas Cochran, is the modern replacement
% for subfigure.sty, the latter of which is no longer maintained and is
% incompatible with some LaTeX packages including fixltx2e. However,
% subfig.sty requires and automatically loads Axel Sommerfeldt's caption.sty
% which will override IEEEtran.cls' handling of captions and this will result
% in non-IEEE style figure/table captions. To prevent this problem, be sure
% and invoke subfig.sty's "caption=false" package option (available since
% subfig.sty version 1.3, 2005/06/28) as this is will preserve IEEEtran.cls
% handling of captions.
% Note that the Computer Society format requires a larger sans serif font
% than the serif footnote size font used in traditional IEEE formatting
% and thus the need to invoke different subfig.sty package options depending
% on whether compsoc mode has been enabled.
%
% The latest version and documentation of subfig.sty can be obtained at:
% http://www.ctan.org/pkg/subfig




% *** FLOAT PACKAGES ***
%
%\usepackage{fixltx2e}
% fixltx2e, the successor to the earlier fix2col.sty, was written by
% Frank Mittelbach and David Carlisle. This package corrects a few problems
% in the LaTeX2e kernel, the most notable of which is that in current
% LaTeX2e releases, the ordering of single and double column floats is not
% guaranteed to be preserved. Thus, an unpatched LaTeX2e can allow a
% single column figure to be placed prior to an earlier double column
% figure.
% Be aware that LaTeX2e kernels dated 2015 and later have fixltx2e.sty's
% corrections already built into the system in which case a warning will
% be issued if an attempt is made to load fixltx2e.sty as it is no longer
% needed.
% The latest version and documentation can be found at:
% http://www.ctan.org/pkg/fixltx2e


%\usepackage{stfloats}
% stfloats.sty was written by Sigitas Tolusis. This package gives LaTeX2e
% the ability to do double column floats at the bottom of the page as well
% as the top. (e.g., "\begin{figure*}[!b]" is not normally possible in
% LaTeX2e). It also provides a command:
%\fnbelowfloat
% to enable the placement of footnotes below bottom floats (the standard
% LaTeX2e kernel puts them above bottom floats). This is an invasive package
% which rewrites many portions of the LaTeX2e float routines. It may not work
% with other packages that modify the LaTeX2e float routines. The latest
% version and documentation can be obtained at:
% http://www.ctan.org/pkg/stfloats
% Do not use the stfloats baselinefloat ability as the IEEE does not allow
% \baselineskip to stretch. Authors submitting work to the IEEE should note
% that the IEEE rarely uses double column equations and that authors should try
% to avoid such use. Do not be tempted to use the cuted.sty or midfloat.sty
% packages (also by Sigitas Tolusis) as the IEEE does not format its papers in
% such ways.
% Do not attempt to use stfloats with fixltx2e as they are incompatible.
% Instead, use Morten Hogholm'a dblfloatfix which combines the features
% of both fixltx2e and stfloats:
%
% \usepackage{dblfloatfix}
% The latest version can be found at:
% http://www.ctan.org/pkg/dblfloatfix




%\ifCLASSOPTIONcaptionsoff
%  \usepackage[nomarkers]{endfloat}
% \let\MYoriglatexcaption\caption
% \renewcommand{\caption}[2][\relax]{\MYoriglatexcaption[#2]{#2}}
%\fi
% endfloat.sty was written by James Darrell McCauley, Jeff Goldberg and
% Axel Sommerfeldt. This package may be useful when used in conjunction with
% IEEEtran.cls'  captionsoff option. Some IEEE journals/societies require that
% submissions have lists of figures/tables at the end of the paper and that
% figures/tables without any captions are placed on a page by themselves at
% the end of the document. If needed, the draftcls IEEEtran class option or
% \CLASSINPUTbaselinestretch interface can be used to increase the line
% spacing as well. Be sure and use the nomarkers option of endfloat to
% prevent endfloat from "marking" where the figures would have been placed
% in the text. The two hack lines of code above are a slight modification of
% that suggested by in the endfloat docs (section 8.4.1) to ensure that
% the full captions always appear in the list of figures/tables - even if
% the user used the short optional argument of \caption[]{}.
% IEEE papers do not typically make use of \caption[]'s optional argument,
% so this should not be an issue. A similar trick can be used to disable
% captions of packages such as subfig.sty that lack options to turn off
% the subcaptions:
% For subfig.sty:
% \let\MYorigsubfloat\subfloat
% \renewcommand{\subfloat}[2][\relax]{\MYorigsubfloat[]{#2}}
% However, the above trick will not work if both optional arguments of
% the \subfloat command are used. Furthermore, there needs to be a
% description of each subfigure *somewhere* and endfloat does not add
% subfigure captions to its list of figures. Thus, the best approach is to
% avoid the use of subfigure captions (many IEEE journals avoid them anyway)
% and instead reference/explain all the subfigures within the main caption.
% The latest version of endfloat.sty and its documentation can obtained at:
% http://www.ctan.org/pkg/endfloat
%
% The IEEEtran \ifCLASSOPTIONcaptionsoff conditional can also be used
% later in the document, say, to conditionally put the References on a
% page by themselves.




% *** PDF, URL AND HYPERLINK PACKAGES ***
%
\usepackage{url}
% url.sty was written by Donald Arseneau. It provides better support for
% handling and breaking URLs. url.sty is already installed on most LaTeX
% systems. The latest version and documentation can be obtained at:
% http://www.ctan.org/pkg/url
% Basically, \url{my_url_here}.




% *** Do not adjust lengths that control margins, column widths, etc. ***
% *** Do not use packages that alter fonts (such as pslatex).         ***
% There should be no need to do such things with IEEEtran.cls V1.6 and later.
% (Unless specifically asked to do so by the journal or conference you plan
% to submit to, of course. )


% correct bad hyphenation here
% \hyphenation{op-tical net-works semi-conduc-tor}

% Code formatting
\usepackage{listings}

\lstdefinestyle{cpp}{
  language=C++,
  numbers=left,
  stepnumber=1,
  numbersep=10pt,
  tabsize=3,
  showspaces=false,
  showstringspaces=false
}

\lstset{basicstyle=\footnotesize,style=cpp}

% Columns
\usepackage{multicol}

% lstlistoflistings patch
\usepackage{xpatch}
\makeatletter
\xpatchcmd\l@lstlisting{1.5em}{0em}{}{}
\makeatother

\begin{document}
%
% paper title
% Titles are generally capitalized except for words such as a, an, and, as,
% at, but, by, for, in, nor, of, on, or, the, to and up, which are usually
% not capitalized unless they are the first or last word of the title.
% Linebreaks \\ can be used within to get better formatting as desired.
% Do not put math or special symbols in the title.
\title{Efficient and Thread-Safe\\ Hashmap}
%
%
% author names and IEEE memberships
% note positions of commas and nonbreaking spaces ( ~ ) LaTeX will not break
% a structure at a ~ so this keeps an author's name from being broken across
% two lines.
% use \thanks{} to gain access to the first footnote area
% a separate \thanks must be used for each paragraph as LaTeX2e's \thanks
% was not built to handle multiple paragraphs
%

\author{Tyler Hostler-Mathis,
        Ashley Voglewede,
        Chris Herrera,
        David Florez
}

% note the % following the last \IEEEmembership and also \thanks -
% these prevent an unwanted space from occurring between the last author name
% and the end of the author line. i.e., if you had this:
%
% \author{....lastname \thanks{...} \thanks{...} }
%                     ^------------^------------^----Do not want these spaces!
%
% a space would be appended to the last name and could cause every name on that
% line to be shifted left slightly. This is one of those "LaTeX things". For
% instance, "\textbf{A} \textbf{B}" will typeset as "A B" not "AB". To get
% "AB" then you have to do: "\textbf{A}\textbf{B}"
% \thanks is no different in this regard, so shield the last } of each \thanks
% that ends a line with a % and do not let a space in before the next \thanks.
% Spaces after \IEEEmembership other than the last one are OK (and needed) as
% you are supposed to have spaces between the names. For what it is worth,
% this is a minor point as most people would not even notice if the said evil
% space somehow managed to creep in.



% The paper headers
\markboth{COP-4520 Research Paper}%
{COP-4520 Research Paper}
% The only time the second header will appear is for the odd numbered pages
% after the title page when using the twoside option.
%
% *** Note that you probably will NOT want to include the author's ***
% *** name in the headers of peer review papers.                   ***
% You can use \ifCLASSOPTIONpeerreview for conditional compilation here if
% you desire.




% If you want to put a publisher's ID mark on the page you can do it like
% this:
%\IEEEpubid{0000--0000/00\$00.00~\copyright~2015 IEEE}
% Remember, if you use this you must call \IEEEpubidadjcol in the second
% column for its text to clear the IEEEpubid mark.



% use for special paper notices
%\IEEEspecialpapernotice{(Invited Paper)}




% make the title area
\maketitle

% As a general rule, do not put math, special symbols or citations
% in the abstract or keywords.
\begin{abstract}
In this work we introduce the idea of an efficient and thread-safe hashmap using parallelization. With our implementation, we are seeing benchmark tests showing a great decrease in run-time when compared to STL. Our API allows for simultaneous insertions and gets to form hash-map like data structure. Removals are planned. To reduce complexity, the hashmap utilizes separate chaining for item insertions of the same hashcode. This allows for all items of the same hashcode to be in a single container within the hashmap, thus only the container itself needs to be thread safe.


\end{abstract}

% Note that keywords are not normally used for peerreview papers.
\begin{IEEEkeywords}
IEEE, IEEEtran, \LaTeX, paper, Parallel processing, Hashmap, Multithreading
\end{IEEEkeywords}

\section{Introduction}
% The very first letter is a 2 line initial drop letter followed
% by the rest of the first word in caps.
%
% form to use if the first word consists of a single letter:
% \IEEEPARstart{A}{demo} file is ....
%
% form to use if you need the single drop letter followed by
% normal text (unknown if ever used by the IEEE):
% \IEEEPARstart{A}{}demo file is ....
%
% Some journals put the first two words in caps:
% \IEEEPARstart{T}{his demo} file is ....
%
% Here we have the typical use of a "T" for an initial drop letter
% and "HIS" in caps to complete the first word.
\IEEEPARstart{M}{ake} an introduction.
Say what our goals were and why we chose our specific implementation. What motivations were there? Any challenges?
What current implementations are there and prior research?

\tableofcontents

\section{Problem Statement}

\IEEEPARstart{T}{he} hashmap is one of the most frequently used data structures that is available in most libraries. It balances quick writes with quick lookups, and allows the user to solve many problems that would be difficult without it. Although the writes and reads are quick, they do have some problems when lots of data is being written. Primarily, if there are many collisions, they must spend some time finding an open space for the data before returning control to the main thread.

Our proposal is to implement a parallelized hashmap that allows the main thread to manage several writes or reads exclusively at the same time. This would both allow the hash map to run more quickly, and exist in a smaller amount of space, since we would not be as concerned about collisions. There are of course details to flesh out, but after some discussion we are confident that we could achieve a reasonable efficiency improvement over the standard implementations.

\section{Prior Research}

\IEEEPARstart{A}{lthough} multithreading is a relatively new field, there has already been significant work done in this area. Most sources utilize strange new probing methods to achieve parallelism, so we decided to try something new and leverage our threads on separate chaining. Include *very* brief summaries of all research in this section. Example citation: \cite{mizanjava} % <- citation information

\section{Implementation}

\IEEEPARstart{T}{here} are a number of languages with extensive support for multithreading, but with our focus on efficiency C++ was a clear choice. We will begin by discussing the fundamental design decisions that were made before any code was written, decisions that defined the progress of the rest of our project.

\subsection{Probing Vs. Separate Chaining}

The first fork in the road of development came in the form of a critical design decision: advanced probing or separate chaining? Although advanced probing would likely prove to be marginally more efficient, we decided to implement separate chaining due to it's high extensibility and plasticity. With a separate chaining approach, we have full freedom to implement, test, and benchmark many different underlying container implementations without having to modify critical Hashmap code. As detailed in listing \ref{lst:polymorphism}, the user can even supply their desired underlying container at compile time via the third template argument of our hashmap.

\lstinputlisting[
    language=C++,
    caption=Polymorphic Containers Example,
    label=lst:polymorphism
]{./src/polymorphism.cpp}

\subsection{Fixed Vs. Dynamic Capacity}

The efficiency of a hashmap is directly related to it's capacity, but of course there is a tradeoff as larger capacities take a longer time to allocate and deallocate. Although the perfect solution to this problem would implement dynamic sizing in order to address this issue, we decided to implement fixed capacity in order to reduce scope. Once all core features are completed, we plan to move forwards with dynamic sizing. For more information refer to Appendix \ref{appendix:dynamicSizing}.


% Example code formatting
% \begin{lstlisting}[
%     language=C++,
%     caption=Example code,
%     label=lst:example
% ]
% for (int i = 0; i < 10; i++)
%     //do something
% \end{lstlisting}

\subsection{Underlying Containers}
Since we took the approach of bucketted hashmaps with separate chaining to resolve collisions, we first needed to design and implement the underlying container in a thread-safe manner. For ease of implementation, we began by paralellizing a linked-list.

\subsubsection{Hand-Over-Hand Locking Linked List}
Our first implementation of a thread-safe linked-list was rather naive, but it got the job done. When traversing the linked-list, we make sure to acquire a lock on the node that we are attempting to move to before unlocking our current node, also known as hand-over-hand locking. This ensures that all operations are operating on the nodes that they are expecting. Important code chunks are included in listings \ref{lst:handOverHandLockingLLAdd}, \ref{lst:handOverHandLockingLLRemove}, and \ref{lst:handOverHandLockingLLFind}. Within these chunks of code, we find linearization points at lines $12$ and $30$ for addition, and $20$ for removal. Although very safe, we expect this container to be the slowest, particularly when thread counts are high.

\begin{multicols}{2}

\lstinputlisting[
    language=C++,
    caption=Hand-Over-Hand Locking Linked List Add,
    label=lst:handOverHandLockingLLAdd
]{./src/hand_over_hand_locking_linked_list_add.cpp}

\lstinputlisting[
    language=C++,
    caption=Hand-Over-Hand Locking Linked List Remove,
    label=lst:handOverHandLockingLLRemove
]{./src/hand_over_hand_locking_linked_list_remove.cpp}

\lstinputlisting[
    language=C++,
    caption=Hand-Over-Hand Locking Linked List Find,
    label=lst:handOverHandLockingLLFind
]{./src/hand_over_hand_locking_linked_list_find.cpp}

\end{multicols}


\subsubsection{Add-Only Lock-Free Linked List}
After locking down predictable behavior with the hand-over-hand locking linked list we moved on to support lock-free containers, starting with an add-only lock-free linked list. Removal is in the works, but will incur a runtime overhead over this implementation. To achieve thread-safe functionality, we iterate over the linked list optimistically and utilize a compare-and-set to apply modifications. If the compare-and-set fails, we can simply search again from the beginning of the list. These failures should be fairly rare and will not significantly affect the runtime. As before, important code is documented in listing \ref{lst:addOnlyLockFreeLinkedListAdd} and \ref{lst:addOnlyLockFreeLinkedListFind}. We find our linearization points at lines $12$ and $27$ while adding.

\begin{multicols}{2}

\lstinputlisting[
    language=C++,
    caption=Add-Only Lock-Free Linked List Add,
    label=lst:addOnlyLockFreeLinkedListAdd,
]{./src/add_only_lock_free_linked_list_add.cpp}

\lstinputlisting[
    language=C++,
    caption=Add-Only Lock-Free Linked List Find,
    label=lst:addOnlyLockFreeLinkedListFind,
]{./src/add_only_lock_free_linked_list_find.cpp}

\end{multicols}



\section{Experimental Results}

\IEEEPARstart{W}{e} will now provide experimental benchmark data for the data structures that we implemented as a component of our research. Some figures cited below reference a key, which represents the sample size used. Detail for all benchmarks is detailed in this section via graphs generated with Jupyter Notebooks. Runtime is measured in milliseconds.

\subsection{Underlying Containers}
\subsubsection{Hand-Over-Hand Locking Linked List}
As expected, the hand-over-hand locking linked list performed the worst of our containers. When many threads attempt to traverse the list, they could all be limited by a single thread attempting to remove an early node. Results can be seen in figure \ref{fig:lockableLL}. Note that the largest case we run is seeing a runtime improvement of over $300$ms when comparing one thread to four.

Although hand-over-hand locking implementation is clearly thread-safe, there are certainly improvements that can be made. By forcing the threads to obtain locks before moving, we create significant bottlenecks for threads attempting to traverse the linked-list at the same time. Notably, we see a worst case runtime of almost four seconds at five threads.

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/lockable_ll.png}
    \caption{Hand-Over-Hand Locking Linked List}
    \label{fig:lockableLL}
\end{figure}

\subsubsection{Add-Only Lock-Free Linked List}
The next attempt took the form of a lock-free linked list which optimistically traverses the linked-list, utilizing a compare-and-set to ensure that the add goes smoothly. Results can be seen in figure \ref{fig:addOnlyLockFreeLL}. This is the default underlying container for our hashmap, as after analyzing hashmap usage, we determined that the average user does not need to add to a linked-list.

This attempt gave a significant runtime improvement over the hand-over-hand locking linked list, with $20,000$ insertions taking roughly one second on one thread, and dropping logarithmically with relation to thread count afterwards.

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/add_only_lock_free_ll.png}
    \caption{Add Only lock-free Linked List}
    \label{fig:addOnlyLockFreeLL}
\end{figure}

\subsection{Hashmaps}
Now that our underlying container's efficiency has been covered, lets move into the hashmap itself. Our hashmap's runtime is defined by it's capacity, as a smaller capacity will clearly create more collisions and thus incur a larger runtime, so we have separated the results into several graphs for ease of understanding.

\subsubsection{Thread-Safe Hashmap}
Our thread-safe hashmap's benchmarks blew us away, with incredible performance over expected. We see large improvements on runtime as threadcount increases. Benchmarks were run up to $10^6$ insertions with $8$ threads. Results are depicted in figure \ref{fig:hashmap}. As expected, we see larger capacity maps running significantly faster, although their allocation and deallocation scales linearly with their capacity.

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/hashmap.png}
    \caption{Thread Safe Hashmap}
    \label{fig:hashmap}
\end{figure}

\subsection{STL Hashmap}
We compared our hashmap with STL (C++ Standard Template Library), and were surprised to find that we improve over STL with a pseudo-linear relationship that decays into logarithmic after roughly 4 threads. The STL benchmark can be found in figure \ref{fig:stlHashmap}, immediately followed by a comparison of our thread-safe hashmap against it in \ref{fig:tshmVsStl}.

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/stl_hashmap.png}
    \caption{STL Hashmap}
    \label{fig:stlHashmap}
\end{figure}

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/tshm_vs_stl.png}
    \caption{TSHM vs STL}
    \label{fig:tshmVsStl}
\end{figure}

\subsection{Managed Hashmap}
As expected, the managed hashmap's performance was abysmal. We see a linear speed increase when swapping from one thread to two; however, all efforts of thread increases afterwards proved fruitless. The managed hashmap simply has significant issues managing it's threads in an efficient way. Benchmarks are located in figure \ref{fig:managedHashmap}.

\begin{figure}[!t]
    \centering
    \includegraphics[width=5in]{images/managed_hashmap.png}
    \caption{Managed Hashmap}
    \label{fig:managedHashmap}
\end{figure}

% An example of a floating figure using the graphicx package.
% Note that \label must occur AFTER (or within) \caption.
% For figures, \caption should occur after the \includegraphics.
% Note that IEEEtran v1.7 and later has special internal code that
% is designed to preserve the operation of \label within \caption
% even when the captionsoff option is in effect. However, because
% of issues like this, it may be the safest practice to put all your
% \label just after \caption rather than within \caption{}.
%
% Reminder: the "draftcls" or "draftclsnofoot", not "draft", class
% option should be used if it is desired that the figures are to be
% displayed while in draft mode.
%
%\begin{figure}[!t]
%\centering
%\includegraphics[width=2.5in]{myfigure}
% where an .eps filename suffix will be assumed under latex,
% and a .pdf suffix will be assumed for pdflatex; or what has been declared
% via \DeclareGraphicsExtensions.
%\caption{Simulation results for the network.}
%\label{fig_sim}
%\end{figure}

% Note that the IEEE typically puts floats only at the top, even when this
% results in a large percentage of a column being occupied by floats.


% An example of a double column floating figure using two subfigures.
% (The subfig.sty package must be loaded for this to work.)
% The subfigure \label commands are set within each subfloat command,
% and the \label for the overall figure must come after \caption.
% \hfil is used as a separator to get equal spacing.
% Watch out that the combined width of all the subfigures on a
% line do not exceed the text width or a line break will occur.
%
%\begin{figure*}[!t]
%\centering
%\subfloat[Case I]{\includegraphics[width=2.5in]{box}%
%\label{fig_first_case}}
%\hfil
%\subfloat[Case II]{\includegraphics[width=2.5in]{box}%
%\label{fig_second_case}}
%\caption{Simulation results for the network.}
%\label{fig_sim}
%\end{figure*}
%
% Note that often IEEE papers with subfigures do not employ subfigure
% captions (using the optional argument to \subfloat[]), but instead will
% reference/describe all of them (a), (b), etc., within the main caption.
% Be aware that for subfig.sty to generate the (a), (b), etc., subfigure
% labels, the optional argument to \subfloat must be present. If a
% subcaption is not desired, just leave its contents blank,
% e.g., \subfloat[].


% An example of a floating table. Note that, for IEEE style tables, the
% \caption command should come BEFORE the table and, given that table
% captions serve much like titles, are usually capitalized except for words
% such as a, an, and, as, at, but, by, for, in, nor, of, on, or, the, to
% and up, which are usually not capitalized unless they are the first or
% last word of the caption. Table text will default to \footnotesize as
% the IEEE normally uses this smaller font for tables.
% The \label must come after \caption as always.
%
%\begin{table}[!t]
%% increase table row spacing, adjust to taste
%\renewcommand{\arraystretch}{1.3}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
%\caption{An Example of a Table}
%\label{table_example}
%\centering
%% Some packages, such as MDW tools, offer better commands for making tables
%% than the plain LaTeX2e tabular which is used here.
%\begin{tabular}{|c||c|}
%\hline
%One & Two\\
%\hline
%Three & Four\\
%\hline
%\end{tabular}
%\end{table}


% Note that the IEEE does not put floats in the very first column
% - or typically anywhere on the first page for that matter. Also,
% in-text middle ("here") positioning is typically not used, but it
% is allowed and encouraged for Computer Society conferences (but
% not Computer Society journals). Most IEEE journals/conferences use
% top floats exclusively.
% Note that, LaTeX2e, unlike IEEE journals/conferences, places
% footnotes above bottom floats. This can be corrected via the
% \fnbelowfloat command of the stfloats package.




\section{Conclusion}
Our implementation of a parllelized hashmap was proven to have a dramatic speed and performance increase in comparison to the standard implementation. Our improvements in efficiency can be accredited to both the underlying container and the hashmap implementation itself.

By testing two different underlying containers, the hand-over-hand locking linked list and the add-only lock-free linked list, we were able to compare both methods and choose the most efficient implementation to further speed up our thread-safe hashmap. Upon testing, the add-only lock free linked list saw significant runtime improvements, had less overhead, and no bottlenecking. Our choice was clear to use the add-only method as our underlying container.

As for our thread-safe hashmap, our benchmark tests showed a direct positive correlation between an increase in threads and a decrease in runtime. It had

Overall, our creation of a thread-safe hashmap was a success! With significant improvements for our parallelized data structure, we have further proven the power of parallel processing and the great potential it holds for the future of computing.



% if have a single appendix:
%\appendix[Proof of the Zonklar Equations]
% or
%\appendix  % for no appendix heading
% do not use \section anymore after \appendix, only \section*
% is possibly needed

% use appendices with more than one appendix
% then use \section to start each appendix
% you must declare a \section before using any
% \subsection or using \label (\appendices by itself
% starts a section numbered zero.)
%


\appendices

\section{Removal}
\label{appendix:removal}
For future iterations of our parallelized hashmap, we plan on implementing removals and erasure. However, due to
time constraints and to achieve maximum efficieny with better runtimes, we collectively decided to leave this feature out. We
also determined that most use cases that use a hashmap do not require removals or erasure, and rely mainly on insertions and lookups.

\section{Dynamic Sizing}
\label{appendix:dynamicSizing}
In order to strike a balance between allocation runtime and hashed spread/efficiency, we will employ a powers-of-two resizing strategy. Given a capacity $n$, we will resize to $2n$ as soon as the hashmap fills $n/2$ elements. This will be accomplished by allocating a new underlying array, and re-hashing all previously hashed items.

\section{Scalability}
\label{appendix:scalability}
We also would like to test on more threads to get a true picture of our scalability, to determine if there is a point where parallelization may have hinder performance rather than improve.
In our current testing, we used 4 threads for our linked list and 8 threads for our thread safe hashmap mainly due to resource restrictions. If given the time and hardware, we could provide more accurate results on scalability.

\lstlistoflistings
\listoffigures

% Appendix one text goes here.

% you can choose not to have a title for an appendix
% if you want by leaving the argument blank
% \section{}
% Appendix two text goes here.


% use section* for acknowledgment
% \section*{Acknowledgment}


% The authors would like to thank...


% Can use something like this to put references on a page
% by themselves when using endfloat and the captionsoff option.
% \ifCLASSOPTIONcaptionsoff
%   \newpage
% \fi



% trigger a \newpage just before the given reference
% number - used to balance the columns on the last page
% adjust value as needed - may need to be readjusted if
% the document is modified later
%\IEEEtriggeratref{8}
% The "triggered" command can be changed if desired:
%\IEEEtriggercmd{\enlargethispage{-5in}}

% references section

% can use a bibliography generated by BibTeX as a .bbl file
% BibTeX documentation can be easily obtained at:
% http://mirror.ctan.org/biblio/bibtex/contrib/doc/
% The IEEEtran BibTeX style support page is at:
% http://www.michaelshell.org/tex/ieeetran/bibtex/
\bibliographystyle{IEEEtran}
% argument is your BibTeX string definitions and bibliography database(s)
\bibliography{./bibtex/bib/biblio}
%
% <OR> manually copy in the resultant .bbl file
% set second argument of \begin to the number of references
% (used to reserve space for the reference number labels box)
% \begin{thebibliography}{1}

% \bibitem{IEEEhowto:kopka}
% H.~Kopka and P.~W. Daly, \emph{A Guide to \LaTeX}, 3rd~ed.\hskip 1em plus
%   0.5em minus 0.4em\relax Harlow, England: Addison-Wesley, 1999.

% \end{thebibliography}

% biography section
%
% If you have an EPS/PDF photo (graphicx package needed) extra braces are
% needed around the contents of the optional argument to biography to prevent
% the LaTeX parser from getting confused when it sees the complicated
% \includegraphics command within an optional argument. (You could create
% your own custom macro containing the \includegraphics command to make things
% simpler here.)
%\begin{IEEEbiography}[{\includegraphics[width=1in,height=1.25in,clip,keepaspectratio]{mshell}}]{Michael Shell}
% or if you just want to reserve a space for a photo:

% \begin{IEEEbiography}{Michael Shell}
% Biography text here.
% \end{IEEEbiography}

% if you will not have a photo at all:
% \begin{IEEEbiographynophoto}{John Doe}
% Biography text here.
% \end{IEEEbiographynophoto}

% insert where needed to balance the two columns on the last page with
% biographies
%\newpage

% \begin{IEEEbiographynophoto}{Jane Doe}
% Biography text here.
% \end{IEEEbiographynophoto}

% You can push biographies down or up by placing
% a \vfill before or after them. The appropriate
% use of \vfill depends on what kind of text is
% on the last page and whether or not the columns
% are being equalized.

%\vfill

% Can be used to pull up biographies so that the bottom of the last one
% is flush with the other column.
%\enlargethispage{-5in}



% that's all folks
\end{document}https://www.overleaf.com/project/622a880fcfc85be25d99d26d
